# usar la configuracion de agroal
# Prod Profile
quarkus.datasource.db-kind = mysql
quarkus.datasource.username = production
quarkus.datasource.password = production
# %prod.quarkus.hibernate-orm.database.generation=create
quarkus.hibernate-orm.database.generation=drop-and-create
# # Must be db:3000 because we're not in localhost or put: <IP_DB_inNetwork>:<portExposedDB>, in production. The api is pakcage in a Docker Container and the mysql too. After docker-compose create a network to let connect this 2 containers between them

# JDBC url without using Docker compose
quarkus.datasource.jdbc.url = jdbc:mysql://172.17.0.2:3306/studentsdb

# # JDBC url using Docker compose
# quarkus.datasource.jdbc.url = jdbc:mysql://db:5432/fruitsdb
quarkus.hibernate-orm.sql-load-script=import-prod.sql
# quarkus.http.port=3003
# %dev.quarkus.http.port=8181

# quarkus.hibernate-orm.database.generation=none # uso con flyway

#quarkus.datasource.start-container=true

# DEV Profile
%dev.quarkus.datasource.db-kind = mysql
%dev.quarkus.datasource.username = develop
%dev.quarkus.datasource.password = develop
%dev.quarkus.datasource.jdbc.url= jdbc:mysql://localhost:3000/studentsdb
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script=import-dev.sql


# #%test Profile
%test.quarkus.datasource.db-kind = mysql
%test.quarkus.datasource.username = test
%test.quarkus.datasource.password = test
# En realidad el TESTCOINTAINER no está cogiendo este valor del jdbc.url porque dentro del INITIALIZER class, le hemos indicado que sobrescriba está propiedad, por lo cual TESTCONTAINERS se encargará de colocar el jdbc.url
%test.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3000/studentsdbtest
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.sql-load-script=import-test.sql